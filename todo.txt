BUGS
 - fix the patch issue with doors and buttons and stuff?
 - why are stages not loading right anymore? 
 - backbuffer redraw jank in intermission?


 
MEMORY IMPROVEMENTS
 - reuse local variables to create fewer in stack?

KNOWN ISSUES
 - no sound, need new 16 bit lib
 - no titlepic, etc. requires 65k allocation, 64k currently maximum
 - time counter on level finish is wrong
 - non shareware enemies probably nonfunctional, needs testing
 - savegames broken. not sure if it will be compatible with original doom
 - rendering issue with weird line early in demo 3 might be related to rendering fuzzy

TODO 

 ~ make actor->angle  fixed_t_union for a_chase improvement
 - move other data into external files. sprnames?

 
 ~ Memory improvements
   x alternate thinker allocator block
     - implement Z_FreeConventional to free thinkers... or proper algorithm to allocate thinkers.
       - can use single byte for size. should store head and use different allocator.       
        - can probably even use high bit for 'freed memory'. 
          - if all mobj are the same size, then dont need size, just "free" bit map and memref map?
            - memref mapping to position in map?
       - non mobj thinker goes in different map?

   - fix demo1/3 crash
  ? how big is texcols, etc? can it fit in conventional?
   - // 21552 each for shareware... this could potentially fit

  - Do something about blocklinks and NUM_BLOCKLINKS

    
    2 smaller static mobj
      - whats size of all of them combined? num mobjs?



    ? playpal in conventional?
    x re-examine pagination amounts per type
    ~ ems 4.0 implementation
      - difficult, most drivers do not support 4+ page frames... maybe qemm386
     
    
    - near heap is largely unused after fileinfo alloca
      - put something in there. over 20k (?) or so unused
    ? implement 'smart' allocator in setup level 
      - allocate most important items in conventional first

 
 - NUM_BLOCKLINKS is 2000. can be way less. 
    - block x and y are bytes. have a 2 byte thing in a list. iterate thru the list.
   - or consider if it can fit in conventional? (later)
 
 - do a pass of fixedmul, div calls... find 32 and 16 param ones instead of 32 and 32, use an alternate call with one fewer cast. faster?

 ? probably remove zoom in am_map if it makes a decent difference in code size and complexity
 - change keyboard down booleans to bits? can save a few hundred bytes
 ? integrate asm based EMS implementation from catacombs 3d or somewhere else see https://github.com/CatacombGames/Catacomb3D/blob/aa97f4995dc7dbea3ecc1794a2d4d4354839cad4/ID_MM.C#L147
 - clean up speed code. probably dont need make_speed in a lot of cases -is high bit projectile only?

 - explicitly declare things near, far when possible?
 - drop conventional visplanes lower, use hybrid solution with EMS visplanes when the # gets high. Definitely under 64k visplanes, but how much is optimal?
 - look into 24 bit fixed point. maxmove caps momx, momy to 30 * fracunit, for example...
 - look into time vs size optimization flags on a per-file basis ?

ASM Improvement ideas
 - fast math calls (multiply by 10, etc)
 - asm draw functions (of course)
 - asm EMS calls


PROFILING
 - check if using 8 instead of 16 bit local vars (especially loop vars) affects 16 bit binary code size
  


 True 16 bit mode ideas
  - 250 pixel width, and then 1 byte various screen width based vars incl those in visplane...

   

TESTING:
 - finale  
 - doom1/2... viles and other enemy (heads, head spawns)

