 
MEMORY IMPROVEMENTS
 - reuse local variables to create fewer in stack
 - create a 'getter' function that just grabs a value from memory without paging somehow?


KNOWN ISSUES
 - no sound, need new 16 bit lib
 - no titlepic, etc. requires 65k allocation, 64k currently maximum
 - time counter on level finish is wrong
 - doom2 enemies probably nonfunctional, needs testing
 - savegames broken. not sure if it will be compatible with original doom
 - rendering issue with weird line early in demo 3 might be related to rendering fuzzy
 - menu sometimes jumps a bit? might be due to keyboard issues
 - are keys working badly or is it just mac dosbox? test again on pc when possible. didnt notice because i was relying on demos too much but i think i did do some 32 to 16 bit code conversion around keyboard input
 - look into raiseToTexture stuff

- doom 16 size currently:
544704 full visplanes large
525744 99 visplanes large
646032 full visplanes huge 
526528 (32 bit)

- after floor 16 stuff mostly done (no frac shift support)
644832 full visplanes huge
526688 32 bit

- doom 32 currently

TODO 
 
 x can texture width be uint8? (add 1 every time used to get 256)
 - fix keyboad bug
 - fix map bug
 - get rid of last bits of multiplayer, players array
 - fix the texture rotate issue?

  2 look into ds->scale1 and associated values to 16 bit? or small fixed, etc
 3 convert fixed_t uses to fixed_t_union (then rename)
 - add feature to 'fix' a page in memory. we could do this in tight loops where page accesses might go abc ade afg etc that would cause A to potentially get paged out unecessarily

 4 screens in conventional instead of allocced
   - screen2/3 wipe in EMS, or dump it for now.
   - get rid of backbuffer? or make it ems?
 5 fix the bugs a bit in expanding visplane mode
   - either make dc_whatever not a global 
   - or make fixed set of memref handles for visplanes at a time somehow? 
 - make pathtraverse work mostly off 16 bit math? i think its possible

 - integrate asm based EMS implementation from catacombs 3d or somewhere else see https://github.com/CatacombGames/Catacomb3D/blob/aa97f4995dc7dbea3ecc1794a2d4d4354839cad4/ID_MM.C#L147
 - clean up speed code. probably dont need make_speed in a lot of cases -is high bit projectile only?
- fix 'shift amount too large' bugs in 16 bit version. probably will go hand in hand with fixed_t work, but some defines may need to explicitly be long typed
 - check if using 8 instead of 16 bit local vars (especially loop vars) affects 16 bit binary code size

 - crazy idea: all vertices, line_t and seg bounding boxes have coords that are mults of 8. if we shift them by 3, the biggest values of ~5500/-5500 int he wads correspond to a range of like -600 to 600 which can be stored in 10 bits. so do some insane superpacked bit array and cut down 128 to 80 bits per node for example. they arent accessed super frequently so the unpacking is unfrequent... may be a net win.
   - sector and ceiling heights could also be stored in int8 this way .    

CATEGORIES OF 32 BIT VARIABLES THAT NEED TO BE KEPT (maybe we can typedef everything) 
 - thing flags
    - can probably be rewritten as a pair of 16 bits?
 - fixed_t 
    - will proably be a dual 16 bit union. in 32 bit form they are often shifted 16 bits to do something simple. we can save a lot of time    
 - angle_t
    - it's sometimes also shifted a lot, like fixed_t. even though its not usually by 16, i think we can save time by unioning it and doing smaller shifts on a 16-bit structure
 - file handles  
    - not even sure if these are 32 or 16 bit in 16 bit mode. might typedef them.
 - filesizes, lengths (lump lengths)
    - dont think we can avoid 32 bit lengths. might typedef these for readability...
 - tics
    - if they are deltas they can usually be 16 bit but otherwise probably needs to be 32?



 IMPROVEMENTS
 ? clean up 0 allocation checking code
 - TEST DOOM2 STUFF
 ? remove disk reading icon (?)
 - save file fixes
 - make titlepic work with > 4 pages?
 - investigate runtime improvements in z_zone.


- get rid of:
  ? more enums
  ? any more net code to dump?
  ? dump bad savegame code


 True 16 bit mode ideas
  - 250 pixel width, and then 1 byte various screen width based vars incl those in visplane...

  



MEMORY IDEAS
 
 x compress memory allocation entries by using bit masks and combining values
 - support allocating some things in conventional memory. 
   - probably need to use it to support titlepic and other large memory things?
   - test to figure out which variables improve fps most in conventional
      - probably sectors, lines, etc...

 - use overlays, especially on startup code to eliminate space
   - maybe menu code in one, finale and p_setup in another? (0x3000 ish each)
     - maybe demo code 
     - maybe wipe code
     - savegame code
     - level intermission code?
     - if we ever do multiple renderers or sound code etc, 
        can fit more in the binary by using overlays?
 - explicitly declare things near, far when possible?
 - reduce visiplanes size below 65k somehow to allow large instead of huge memory model.
   - maybe just reduce the number of visplanes for now...
 - pull strings into ems at runtime by loading from a file rather than compiling
   as data alongside code.  strings are generally used once every blue moon, and 
   d_english.h has got about 15k worth of data sitting there..
  several dozen frames at the most so doesnt make sense for them to be in conventional
  and sectors being paged in and out... 
 - look into using the sourceHint to allocate items with some sort of locality to 
    decrease pagination. rather than marking blocks themselves as reserved,
    probably maintain a fixed list of preferred pages by type, and use that as 
    a temporary rover head for the allocation. mobj for sure would benefit from
    this. can probably benchmark by pagination count and try and lower that number.
 - investigate benefits of fewer bigger source files (less far calls?)

 

TESTING:
 - finale  
 - doom2... viles and other enemy (heads, head spawns)

