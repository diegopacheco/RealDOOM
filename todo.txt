 
MEMORY IMPROVEMENTS
 - reuse local variables to create fewer in stack
 - create a 'getter' function that just grabs a value from memory without paging somehow?


KNOWN ISSUES
 - no sound, need new 16 bit lib
 - no titlepic, etc. requires 65k allocation, 64k currently maximum
 - time counter on level finish is wrong
 - doom2 enemies probably nonfunctional, needs testing
 - savegames broken. not sure if it will be compatible with original doom
 - rendering issue with weird line early in demo 3 might be related to rendering fuzzy
 - menu sometimes jumps a bit? might be due to keyboard issues
 - are keys working badly or is it just mac dosbox? test again on pc when possible.

TODO 
 
 ~ make ems actually work
 ~ set visiplanes under 64k and see if large compile works
 1 change a bunch of int_32t to int_16t, see if it still works
 2 change fixed_t stuff
   - make it a union. custom add and subtract just like fixedmul/fixeddiv?
 3 screens in conventional instead of allocced
   - screen2/3 wipe in EMS, or dump it for now.
   - get rid of backbuffer? or make it ems?
 - get rid of last bits of multiplayer, players array
 - integrate asm based EMS implementation from catacombs 3d or somewhere else see https://github.com/CatacombGames/Catacomb3D/blob/aa97f4995dc7dbea3ecc1794a2d4d4354839cad4/ID_MM.C#L147
 - clean up speed code. probably dont need make_speed in a lot of cases -is high bit projectile only?
 
CATEGORIES OF 32 BIT VARIABLES THAT NEED TO BE KEPT (maybe we can typedef everything) 
 - thing flags
    - can probably be rewritten as a pair of 16 bits?
 - fixed_t 
    - will proably be a dual 16 bit union. in 32 bit form they are often shifted 16 bits to do something simple. we can save a lot of time    
 - angle_t
    - it's sometimes also shifted a lot, like fixed_t. even though its not usually by 16, i think we can save time by unioning it and doing smaller shifts on a 16-bit structure
 - file handles  
    - not even sure if these are 32 or 16 bit in 16 bit mode. might typedef them.
 - filesizes, lengths (lump lengths)
    - dont think we can avoid 32 bit lengths. might typedef these for readability...
 - tics
    - if they are deltas they can usually be 16 bit but otherwise probably needs to be 32?



 IMPROVEMENTS
 ? clean up 0 allocation checking code
 - TEST DOOM2 STUFF
 ? remove disk reading icon (?)
 - save file fixes
 - make titlepic work with > 4 pages?
 - investigate runtime improvements in z_zone.


- get rid of:
  ? more enums
  ? any more net code to dump?
  ? dump bad savegame code
  



MEMORY IDEAS
 
 ~ compress memory allocation entries by using bit masks and combining values
 - support allocating some things in conventional memory. 
   - probably need to use it to support titlepic and other large memory things?
   - test to figure out which variables improve fps most in conventional
      - probably sectors, lines, etc...

 - use overlays, especially on startup code to eliminate space
   - if we ever do multiple renderers or sound code etc, 
        can fit more in the binary by using overlays?
 - go thru all int32_ts and make as many int16_t as possible
 - explicitly declare things near, far when possible?
 - reduce visiplanes size below 65k somehow to allow large instead of huge memory model.
   - maybe just reduce the number of visplanes for now...
 - pull strings into ems at runtime by loading from a file rather than compiling
   as data alongside code.  strings are generally used once every blue moon, and 
   d_english.h has got about 15k worth of data sitting there..
  several dozen frames at the most so doesnt make sense for them to be in conventional
  and sectors being paged in and out... 
 - look into using the sourceHint to allocate items with some sort of locality to 
    decrease pagination. rather than marking blocks themselves as reserved,
    probably maintain a fixed list of preferred pages by type, and use that as 
    a temporary rover head for the allocation. mobj for sure would benefit from
    this. can probably benchmark by pagination count and try and lower that number.
 - investigate benefits of fewer bigger source files (less far calls?)

 

TESTING:
 - finale  
 - doom2... viles and other enemy (heads, head spawns)

